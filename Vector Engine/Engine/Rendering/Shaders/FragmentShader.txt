#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;

void main()
{
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1, 0.2);

	vec3 diffuse = brightness * lightColor;

	//Below is a quick and dirty "incremental" color applier. Only works per pixel, so it looks like incremental spheres.
	//diffuse.x = int(diffuse.x * 5) / 5.0;
	//diffuse.y = int(diffuse.y * 5) / 5.0;
	//diffuse.z = int(diffuse.z * 5) / 5.0;

	out_Color = vec4(diffuse, 1.0) * texture(textureSampler, pass_textureCoords);
}