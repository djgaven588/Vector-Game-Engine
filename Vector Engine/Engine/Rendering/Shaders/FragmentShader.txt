#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[12];

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColors[12];
uniform float lightIntensities[12];
uniform float lightDistances[12];

void main()
{
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 totalDiffuse = vec3(0,0,0);
	for(int i=0;i<12;i++) {
		if(lightIntensities[i] == 0.0 || lightDistances[i] < length(toLightVector[i])) {
			continue;
		}
		vec3 unitLightVector = normalize(toLightVector[i]);
	
		float brightness = dot(unitNormal, unitLightVector) * (1 - (length(toLightVector[i] / lightDistances[i])));
		vec3 localDiffuse = brightness * lightColors[i] * lightIntensities[i];
		totalDiffuse += localDiffuse;
	}

	totalDiffuse = max(totalDiffuse, 0.2);

	out_Color = vec4(totalDiffuse, 1.0) * texture(textureSampler, pass_textureCoords);
}